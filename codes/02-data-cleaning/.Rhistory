# In the mass shooter DB, we will filter the data down to only school shootings
# and we will generate an id that can connect the incidents/cases to the school
# shooting DB
shooters_clean_MS <- shooters_MS %>%
# Filter on locations of 0 (K-12 schools) and 1 (colleges/universities)
filter(Location == 0 | Location == 1 |
Other.Location == 0 | Other.Location == 1) %>%
mutate(Incident_ID_partial = sprintf("%04d%02d%02d%s",
Year,
Month,
Day,
State))
# Save partial incident IDs
partial_ids <- shooters_clean_MS$Incident_ID_partial
# Create incident key in MSDB
# Save incident ids from SSDB
incident_ids <- incident_SS$Incident_ID
# Save partial incident IDs
partial_ids <- shooters_clean_MS$Incident_ID_partial
for (par_id in partial_ids) {
print(par_id)
}
print(i)
for (i in 1:length(partial_ids)) {
print(i)
}
for (i in 1:length(partial_ids)) {
print(partial_ids[i])
}
for (i in 1:length(partial_ids)) {
partial_ids[i] <- incident_ids[grepl(partial_ids[i], incident_ids, fixed = TRUE)]
}
for (i in 1:length(partial_ids)) {
completed_id <- incident_ids[grepl(partial_ids[i], incident_ids, fixed = TRUE)]
if (completed_id > 0) {
partial_ids[i] <- completed_id
} else{
partial_ids[i] <- 0
}
}
for (i in 1:length(partial_ids)) {
completed_id <- incident_ids[grepl(partial_ids[i], incident_ids, fixed = TRUE)]
if (identical(completed_id, character(0))) {
partial_ids[i] <- completed_id
} else{
partial_ids[i] <- 0
}
}
for (i in 1:length(partial_ids)) {
completed_id <- incident_ids[grepl(partial_ids[i], incident_ids, fixed = TRUE)]
if (identical(completed_id, character(0))) {
partial_ids[i] <- 0
}
else {
partial_ids[i] <- completed_id
}
}
partial_ids
for (i in 1:length(partial_ids)) {
completed_id <- incident_ids[grepl(partial_ids[i], incident_ids, fixed = TRUE)]
if (identical(completed_id, character(0))) {
partial_ids[i] <- "NA"
}
else {
partial_ids[i] <- completed_id
}
}
# Create incident key in MSDB
# Save incident ids from SSDB
incident_ids <- incident_SS$Incident_ID
# Save partial incident IDs
partial_ids <- shooters_clean_MS$Incident_ID_partial
for (i in 1:length(partial_ids)) {
completed_id <- incident_ids[grepl(partial_ids[i], incident_ids, fixed = TRUE)]
if (identical(completed_id, character(0))) {
partial_ids[i] <- "NA"
}
else {
partial_ids[i] <- completed_id
}
}
# Save completed IDs to shooters_clean_MS, reorder columns, drop partial ids
shooters_clean_MS <- shooters_clean_MS %>%
mutate(Incident_ID = partial_ids)
# Save completed IDs to shooters_clean_MS, reorder columns, drop partial ids
shooters_clean_MS <- shooters_clean_MS %>%
mutate(Incident_ID = partial_ids) %>%
select(c(-Incident_ID_partial))
# Save completed IDs to shooters_clean_MS, reorder columns, drop partial ids
shooters_clean_MS <- shooters_clean_MS %>%
mutate(Incident_ID = partial_ids) %>%
select(c(-Incident_ID_partial)) %>%
relocate(Incident_ID)
# Import libraries
library(tidyverse)
# Read in data
data_path <- "../../data/01-modified-data/"
shooters_MS <- read.csv(paste0(data_path, "MSDB/mass_shooter_database.csv"),
skip = 1)
incident_SS <- read.csv(paste0(data_path, "SSDB/incident.csv"))
shooters_SS <- read.csv(paste0(data_path, "SSDB/shooter.csv"))
# Remove duplicate row
incident_SS <- incident_SS[-286,]
# In the mass shooter DB, we will filter the data down to only school shootings
# and we will generate an id that can connect the incidents/cases to the school
# shooting DB
shooters_clean_MS <- shooters_MS %>%
# Filter on locations of 0 (K-12 schools) and 1 (colleges/universities)
filter(Location == 0 | Location == 1 |
Other.Location == 0 | Other.Location == 1) %>%
mutate(Incident_ID_partial = sprintf("%04d%02d%02d%s",
Year,
Month,
Day,
State))
# Create incident key in MSDB
# Save incident ids from SSDB
incident_ids <- incident_SS$Incident_ID
# Save partial incident IDs
partial_ids <- shooters_clean_MS$Incident_ID_partial
# Complete partial ids if they match an incident id in SSDB
for (i in 1:length(partial_ids)) {
completed_id <- incident_ids[grepl(partial_ids[i], incident_ids, fixed = TRUE)]
if (identical(completed_id, character(0))) {
partial_ids[i] <- "NA"
}
else {
partial_ids[i] <- completed_id
}
}
# Save completed IDs to shooters_clean_MS, reorder columns, drop partial ids
shooters_clean_MS <- shooters_clean_MS %>%
mutate(Incident_ID = partial_ids) %>%
select(c(-Incident_ID_partial)) %>%
relocate(Incident_ID)
# Import libraries
library(tidyverse)
# Read in data
data_path <- "../../data/01-modified-data/"
shooters_MS <- read.csv(paste0(data_path, "MSDB/mass_shooter_database.csv"),
skip = 1)
incident_SS <- read.csv(paste0(data_path, "SSDB/incident.csv"))
shooters_SS <- read.csv(paste0(data_path, "SSDB/shooter.csv"))
# Remove duplicate row
incident_SS <- incident_SS[-286,]
# Import libraries
library(tidyverse)
# Read in data
data_path <- "../../data/01-modified-data/"
shooters_MS <- read.csv(paste0(data_path, "MSDB/mass_shooter_database.csv"),
skip = 1)
incident_SS <- read.csv(paste0(data_path, "SSDB/incident.csv"))
shooters_SS <- read.csv(paste0(data_path, "SSDB/shooter.csv"))
View(incident_SS[incident_SS$Incident_ID == "20210902CASAL",])
install.packages("xtable")
#######
library(xtable)
print(xtable(incident_SS[incident_SS$Incident_ID == "20210902CASAL",]), type = "html")
# In the mass shooter DB, we will filter the data down to only school shootings
# and we will generate an id that can connect the incidents/cases to the school
# shooting DB
shooters_clean_MS <- shooters_MS %>%
# Filter on locations of 0 (K-12 schools) and 1 (colleges/universities)
filter(Location == 0 | Location == 1 |
Other.Location == 0 | Other.Location == 1) %>%
mutate(Incident_ID_partial = sprintf("%04d%02d%02d%s",
Year,
Month,
Day,
State))
# Create incident key in MSDB
# Save incident ids from SSDB
incident_ids <- incident_SS$Incident_ID
# Save partial incident IDs
partial_ids <- shooters_clean_MS$Incident_ID_partial
# Complete partial ids if they match an incident id in SSDB
for (i in 1:length(partial_ids)) {
completed_id <- incident_ids[grepl(partial_ids[i], incident_ids, fixed = TRUE)]
if (identical(completed_id, character(0))) {
partial_ids[i] <- "NA"
}
else {
partial_ids[i] <- completed_id
}
}
# Save completed IDs to shooters_clean_MS, reorder columns, drop partial ids
shooters_clean_MS <- shooters_clean_MS %>%
mutate(Incident_ID = partial_ids) %>%
select(c(-Incident_ID_partial)) %>%
relocate(Incident_ID)
write.csv(shooters_clean_MS,
"../../data/02-clean-data/MSDB/school_shooters.csv",
row.names = FALSE)
# For context/information on data_cleaning.html
nrow(shooters_MS)
nrow(shooters_clean_MS)
nrow(shooters_clean_MS[shooters_clean_MS$Incident_ID !="NA"])
nrow(shooters_clean_MS[shooters_clean_MS$Incident_ID !="NA",])
View(shooters_clean_MS[shooters_clean_MS$Incident_ID !="NA",])
View(shooters_clean_MS[shooters_clean_MS$Incident_ID =="NA",])
SS_missing <- shooters_clean_MS[shooters_clean_MS$Incident_ID =="NA",]
View(SS_missing)
write.csv(SS_missing,
"../../data/02-clean-data/missing_shooters.csv",
row.names = FALSE)
# In the mass shooter DB, we will filter the data down to only school shootings
# and we will generate an id that can connect the incidents/cases to the school
# shooting DB
shooters_clean_MS <- shooters_MS %>%
# Filter on locations of 0 (K-12 schools) and 1 (colleges/universities)
filter(Location == 0 | Location == 1 |
Other.Location == 0 | Other.Location == 1) %>%
mutate(Incident_ID_partial = sprintf("%04d%02d%02d%s",
Year,
Month,
Day,
State))
# Create incident key in MSDB
# Save incident ids from SSDB
incident_ids <- incident_SS$Incident_ID
# Save partial incident IDs
partial_ids <- shooters_clean_MS$Incident_ID_partial
# Complete partial ids if they match an incident id in SSDB
for (i in 1:length(partial_ids)) {
completed_id <- incident_ids[grepl(partial_ids[i], incident_ids, fixed = TRUE)]
if (identical(completed_id, character(0))) {
partial_ids[i] <- "NA"
}
else {
partial_ids[i] <- completed_id
}
}
# Save completed IDs to shooters_clean_MS, reorder columns, reformat dates for
# easier comparison with SSDB
shooters_clean_MS <- shooters_clean_MS %>%
mutate(Incident_ID = partial_ids,
Full.Date.SSDB = sprintf("%04d-%02d-%02d"), Year, Month, Day) %>%
select(c(-Incident_ID_partial)) %>%
relocate(c(Incident_ID, Full.Date.SSDB))
sprintf("%04d-%02d-%02d"), 2022, 4, 3)
# Save completed IDs to shooters_clean_MS, reorder columns, reformat dates for
# easier comparison with SSDB
shooters_clean_MS <- shooters_clean_MS %>%
mutate(Incident_ID = partial_ids,
Full.Date.SSDB = sprintf("%04d-%02d-%02d", Year, Month, Day)) %>%
select(c(-Incident_ID_partial)) %>%
relocate(c(Incident_ID, Full.Date.SSDB))
write.csv(shooters_clean_MS,
"../../data/02-clean-data/MSDB/school_shooters.csv",
row.names = FALSE)
# Now let's take a closer look at the shooters that aren't present in SSDB and
# ascertain why
SS_missing <- shooters_clean_MS[shooters_clean_MS$Incident_ID =="NA",]
# Now let's take a closer look at the shooters that aren't present in SSDB and
# ascertain why
MS_missing <- shooters_clean_MS[shooters_clean_MS$Incident_ID =="NA",]
write.csv(MS_missing,
"../../data/02-clean-data/missing_shooters.csv",
row.names = FALSE)
incident_SS$Date
incident_SS$Date %in% MS_missing$Full.Date.SSDB
# Return all SSDB incidents that occurred on the the same day as a missing
# MSDB incident
SS_missing <- incident_SS[incident_SS$Date %in% MS_missing$Full.Date.SSDB,]
incident_SS$Date %in% MS_missing$Full.Date.SSDB
View(MS_missing)
incident_SS[incident_SS$Date == "2015-10-01"]
incident_SS[incident_SS$Date == "2015-10-01",]
View(incident_SS)
# Import libraries
library(tidyverse)
# Read in data
data_path <- "../../data/01-modified-data/"
shooters_MS <- read.csv(paste0(data_path, "MSDB/mass_shooter_database.csv"),
skip = 1)
incident_SS <- read.csv(paste0(data_path, "SSDB/incident.csv"))
shooters_SS <- read.csv(paste0(data_path, "SSDB/shooter.csv"))
victims_SS <- read.csv(paste0(data_path, "SSDB/victim.csv"))
victims_SS <- read.csv(paste0(data_path, "SSDB/victim.csv")) %>%
# Match column name for unique key identifier column with that of the
# incident table
rename(Incident_ID = incidentid)
victims_SS <- read.csv(paste0(data_path, "SSDB/victim.csv")) %>%
# Match column name for unique key identifier column with that of the
# incident table
rename(Incident_ID = incidentid)
write.csv(shooters_SS, "../../data/02-clean-data/SSDB/shooter.csv",
row.names = FALSE)
write.csv(victims_SS, "../../data/02-clean-data/SSDB/victim.csv",
row.names = FALSE)
# Import libraries
library(tidyverse)
# Read in data
data_path <- "../../data/01-modified-data/"
shooters_MS <- read.csv(paste0(data_path, "MSDB/mass_shooter_database.csv"),
skip = 1)
incident_SS <- read.csv(paste0(data_path, "SSDB/incident.csv"))
shooters_SS <- read.csv(paste0(data_path, "SSDB/shooter.csv")) %>%
# Match column name for unique key identifier column with that of the
# incident table
rename(Incident_ID = incidentid)
victims_SS <- read.csv(paste0(data_path, "SSDB/victim.csv")) %>%
# Match column name for unique key identifier column with that of the
# incident table
rename(Incident_ID = incidentid)
write.csv(shooters_SS, "../../data/02-clean-data/SSDB/shooter.csv",
row.names = FALSE)
write.csv(victims_SS, "../../data/02-clean-data/SSDB/victim.csv",
row.names = FALSE)
# Import libraries
library(tidyverse)
# Read in data
data_path <- "../../data/01-modified-data/"
shooters_MS <- read.csv(paste0(data_path, "MSDB/mass_shooter_database.csv"),
skip = 1)
incident_SS <- read.csv(paste0(data_path, "SSDB/incident.csv"))
shooters_SS <- read.csv(paste0(data_path, "SSDB/shooter.csv")) %>%
# Match column name for unique key identifier column with that of the
# incident table
rename(Incident_ID = incidentid)
victims_SS <- read.csv(paste0(data_path, "SSDB/victim.csv")) %>%
# Match column name for unique key identifier column with that of the
# incident table
rename(Incident_ID = incidentid)
install.packages('educationdata')
# Import libraries
library(tidyverse)
# Read in data
data_path <- "../../data/01-modified-data/"
shooters_MS <- read.csv(paste0(data_path, "MSDB/mass_shooter_database.csv"),
skip = 1)
incident_SS <- read.csv(paste0(data_path, "SSDB/incident.csv"))
shooters_SS <- read.csv(paste0(data_path, "SSDB/shooter.csv")) %>%
# Match column name for unique key identifier column with that of the
# incident table
rename(Incident_ID = incidentid)
victims_SS <- read.csv(paste0(data_path, "SSDB/victim.csv")) %>%
# Match column name for unique key identifier column with that of the
# incident table
rename(Incident_ID = incidentid)
write.csv(shooters_SS, "../../data/02-clean-data/SSDB/shooter.csv",
row.names = FALSE)
write.csv(victims_SS, "../../data/02-clean-data/SSDB/victim.csv",
row.names = FALSE)
# There appears to be a duplicate Incident_ID in the school shooting DB
#incident_SS[duplicated(incident_SS$Incident_ID),]$Incident_ID
# The id in question is 20210902CASAL. Viewing the details...
#View(incident_SS[incident_SS$Incident_ID == "20210902CASAL",])
# On further research, the second record with the duplicate id seems to have
# been based on a misinformed article (it no longer exists, whereas the story
# given in the first record is still posted on multiple local news sites)
# Remove duplicate row
incident_SS <- incident_SS[-286,]
write.csv(incident_SS, "../../data/02-clean-data/SSDB/incident.csv",
row.names = FALSE)
# In the mass shooter DB, we will filter the data down to only school shootings
# and we will generate an id that can connect the incidents/cases to the school
# shooting DB
shooters_clean_MS <- shooters_MS %>%
# Filter on locations of 0 (K-12 schools) and 1 (colleges/universities)
filter(Location == 0 | Location == 1 |
Other.Location == 0 | Other.Location == 1) %>%
mutate(Incident_ID_partial = sprintf("%04d%02d%02d%s",
Year,
Month,
Day,
State))
# Create incident key in MSDB
# Save incident ids from SSDB
incident_ids <- incident_SS$Incident_ID
# Save partial incident IDs
partial_ids <- shooters_clean_MS$Incident_ID_partial
# Complete partial ids if they match an incident id in SSDB
for (i in 1:length(partial_ids)) {
completed_id <- incident_ids[grepl(partial_ids[i], incident_ids, fixed = TRUE)]
if (identical(completed_id, character(0))) {
partial_ids[i] <- "NA"
}
else {
partial_ids[i] <- completed_id
}
}
# Save completed IDs to shooters_clean_MS, reorder columns, reformat dates for
# easier comparison with SSDB
shooters_clean_MS <- shooters_clean_MS %>%
mutate(Incident_ID = partial_ids,
Full.Date.SSDB = sprintf("%04d-%02d-%02d", Year, Month, Day)) %>%
select(c(-Incident_ID_partial)) %>%
relocate(c(Incident_ID, Full.Date.SSDB))
write.csv(shooters_clean_MS,
"../../data/02-clean-data/MSDB/school_shooters.csv",
row.names = FALSE)
# Now let's take a closer look at the shooters that aren't present in SSDB and
# ascertain why
MS_missing <- shooters_clean_MS[shooters_clean_MS$Incident_ID =="NA",]
write.csv(MS_missing,
"../../data/02-clean-data/missing_shooters.csv",
row.names = FALSE)
# Return all SSDB incidents that occurred on the the same day as a missing
# MSDB incident
SS_missing <- incident_SS[incident_SS$Date %in% MS_missing$Full.Date.SSDB,]
#######
# For printing tables in html
# library(xtable)
# print(xtable(incident_SS[incident_SS$Incident_ID == "20210902CASAL",]), type = "html")
# For context/information on data_cleaning.html
# How many total shooters are listed in MSDB?
# nrow(shooters_MS)
# 351
# How many school shooters are listed in MSDB?
# nrow(shooters_clean_MS)
# 24
# How many of the school shooters in MSDB are also listed in SSDB?
# nrow(shooters_clean_MS[shooters_clean_MS$Incident_ID !="NA",])
# 14
#######
# Run clean_databases.R first
source(clean_databases.R)
# Run clean_databases.R first
source('./clean_databases.R')
# Import Urban Institute's educationdata library
library(educationdata)
# Read in school data
schools <- get_education_data(level = 'schools',
source = 'ccd',
topic = 'directory',
add_labels = TRUE)
# Read in school data
schools <- get_education_data(level = 'schools',
source = 'ccd',
topic = 'directory',
filters = list(year = 2020),
add_labels = TRUE)
length(unique(schools$school_name))
length(unique(paste(schools$school_name, schools$state_location)))
length(unique(paste(schools$school_name, schools$state_location, schools$city_location)))
length(unique(schools$school_id))
schools[duplicated(schools$school_name),]
View(schools[duplicated(schools$school_name),])
schools[c("school_name", "state_location"),]
schools[,c("school_name", "state_location")]
View(schools[duplicated(schools[,c("school_name", "state_location")]),])
View(schools[duplicated(schools[,c("school_name", "zip_location", )]),])
length(unique(paste(schools$school_name, schools$zip_location)))
View(incident_SS)
incident_SS$Date
incident_SS$Date[length(incident_SS$Date) != 10]
incident_SS$Date[1]
incident_SS$Date[1][:4]
incident_SS$Date[1][1:4]
substr(incident_SS$Date[1], 1, 4)
incident_SS <- read.csv(paste0(data_path, "SSDB/incident.csv")) %>%
# Break down Data column into Year, Month, and Day columns
mutate(Year = as.numeric(substr(Date, 1, 4)))
unique(incident_SS$Year)
substr(incident_SS$Date[1], 6, 7)
substr(incident_SS$Date[1], 9, 10)
# Run clean_databases.R first
source('./clean_databases.R')
View(incident_SS[incident_SS$Year == 2020])
View(incident_SS[incident_SS$Year == 2020,])
View(schools[schools$school_name == "Rogers High School",])
get_education_data(level = "schools", source = "ccd", topic = "directory", filters = list(year = 2020, school_name="Rogers High School", state_location="WA"))
ls()
install.packages("gdata")
# Import library for object storage management
library(gdata)
keep(incident_SS)
# Remove all objects from the workspace defined from clean_databases.R except
# incident_SS
keep(incident_SS, sure = TRUE)
# Save dataframe
write.csv(incidents_SS, "./../../../large_data/00-raw-data/UI_Education_Data/",
row.names = FALSE)
# Save dataframe
write.csv(incident_SS, "./../../../large_data/00-raw-data/UI_Education_Data/",
row.names = FALSE)
# Save dataframe
write.csv(incident_SS,
"./../../../large_data/00-raw-data/UI_Education_Data/schools_dir.csv",
row.names = FALSE)
# Import Urban Institute's educationdata library
library(educationdata)
# Import library for object storage management
library(gdata)
# Ensure that clean_databases.R has been run first
source('./clean_databases.R')
# Remove all objects from the workspace defined from clean_databases.R except
# incident_SS
keep(incident_SS, sure = TRUE)
# Read in school data
schools_dir <- get_education_data(level = 'schools',
source = 'ccd',
topic = 'directory',
add_labels = TRUE)
gc()
getwd()
# Save dataframe
incs <- read.csv("./../data/01-modified-data/SSDB/incident.csv")
# Save dataframe
incs <- read.csv("./../../data/01-modified-data/SSDB/incident.csv")
write.csv(incs,
"./../../../../large_data/00-raw-data/UI_Education_Data/schools_dir.csv",
row.names = FALSE)
setwd('/Users/joshgladwell/Documents/DSAN/Coursework/Year1/Fall_2022/ANLY_501/Project/anly-501-project-joshegladwell/codes/01-data-gathering/APIs')
write.csv(incs,
"./../../../../large_data/00-raw-data/UI_Education_Data/schools_dir.csv",
row.names = FALSE)
setwd('/Users/joshgladwell/Documents/DSAN/Coursework/Year1/Fall_2022/ANLY_501/Project/anly-501-project-joshegladwell/codes')
setwd('/Users/joshgladwell/Documents/DSAN/Coursework/Year1/Fall_2022/ANLY_501/Project/anly-501-project-joshegladwell/codes/02-data-cleaning/')
getwd()
gc()
