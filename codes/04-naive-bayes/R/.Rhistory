"Regional",
"National",
"International")),
# Consolidate Jr High and Middle in School_Level
School_Level = replace(School_Level,
School_Level == "Junior High",
"Middle"),
# Reorder levels and convert to numeric
School_Level = as.numeric(
fct_relevel(School_Level,
"Elementary",
"Middle",
"High"))
)
# Reorder factor levels for Media_Attention and School_Level
# fct_relevel(nb_set$Media_Attention, "Local", "Regional", "National", "International")
# Redefine factor columns as numerical
nb_set$School_Level
nb_set <- incidents %>%
# Select columns of interest
select(Incident_ID,
Media_Attention,
School_Level,
pct_White,
pct_Black,
pct_Hispanic,
pct_Asian) %>%
# Filter out missing data
filter(Media_Attention != "",
School_Level != "null",
!is.na(pct_White),
!is.na(pct_Black),
!is.na(pct_Hispanic),
!is.na(pct_Asian),
# Also filter out non-high school, middle school, and elem school
# classifications for simplicity (only four don't belong to these
# categories)
(School_Level != "K-12" &
School_Level != "K-8" &
School_Level != "Other")) %>%
# Join fatalities data
left_join(fatalities, by = "Incident_ID") %>%
# Change missing values in fatalities column to 0
mutate(fatalities = ifelse(is.na(fatalities), 0, fatalities),
# Reorder levels for Media_Attention, convert to numeric
Media_Attention = as.numeric(
fct_relevel(Media_Attention,
"Local",
"Regional",
"National",
"International")),
# Consolidate Jr High and Middle in School_Level
School_Level = replace(School_Level,
School_Level == "Junior High",
"Middle"),
# Reorder levels and convert to numeric
School_Level = as.numeric(
fct_relevel(School_Level,
"Elementary",
"Middle",
"High"))
)
# Perform train-test split
split <- sample.split(nb_set, SplitRatio = 0.7)
train_cl <- subset(nb_set, split == "TRUE")
test_cl <- subset(nb_set, split == "FALSE")
# Feature Scaling
train_scale <- scale(train_cl[, 2:8])
View(train_scale)
test_scale <- scale(test_cl[, 2:8])
# Scale features
train_mus <- mean(train_cl[, 2:8])
apply(train_cl[, 2:8], 2, mean)
# Scale features
train_mus <- apply(train_cl[, 2:8], 2, mean)
train_sds <- apply(train_cl[, 2:8], 2, sd)
train_mus - train_cl[, 2:8]
train_scale <- (train_mus - train_cl[, 2:8]) / train_sds
test_scale <- (train_mus - test_cl[, 2:8]) / train_sds
View(test_scale)
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(Media_Attention ~ ., data = train_scale)
classifier_cl
View(train_scale)
# Scale features
train_mus <- apply(train_cl[, 2:8], 2, mean)
train_sds <- apply(train_cl[, 2:8], 2, sd)
train_scale <- (train_cl[, 2:8] - train_mus) / train_sds
test_scale <- (test_cl[, 2:8] - train_mus) / train_sds
View(train_cl)
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(Media_Attention ~ ., data = train_scale)
classifier_cl
# Predicting on test data
y_pred <- predict(classifier_cl, newdata = test_scale)
# Confusion Matrix
cm <- table(test_cl$Species, y_pred)
# Confusion Matrix
cm <- table(test_cl$Media_Attention, y_pred)
cm
# Model Evaluation
confusionMatrix(cm)
# Model Evaluation
confusionMatrix(cm)
View(cm)
nb_set <- incidents %>%
# Select columns of interest
select(Incident_ID,
Media_Attention,
School_Level,
pct_White,
pct_Black,
pct_Hispanic,
pct_Asian) %>%
# Filter out missing data
filter(Media_Attention != "",
School_Level != "null",
!is.na(pct_White),
!is.na(pct_Black),
!is.na(pct_Hispanic),
!is.na(pct_Asian),
# Also filter out non-high school, middle school, and elem school
# classifications for simplicity (only four don't belong to these
# categories)
(School_Level != "K-12" &
School_Level != "K-8" &
School_Level != "Other")) %>%
# Join fatalities data
left_join(fatalities, by = "Incident_ID") %>%
# Change missing values in fatalities column to 0
mutate(fatalities = ifelse(is.na(fatalities), 0, fatalities),
# Reorder levels for Media_Attention
Media_Attention =
fct_relevel(Media_Attention,
"Local",
"Regional",
"National",
"International"),
# Consolidate Jr High and Middle in School_Level
School_Level = replace(School_Level,
School_Level == "Junior High",
"Middle"),
# Reorder levels and convert to numeric
School_Level = as.numeric(
fct_relevel(School_Level,
"Elementary",
"Middle",
"High"))
)
View(nb_set)
# Perform train-test split
split <- sample.split(nb_set, SplitRatio = 0.7)
train_cl <- subset(nb_set, split == "TRUE")
test_cl <- subset(nb_set, split == "FALSE")
# Scale features
train_mus <- apply(train_cl[, 2:8], 2, mean)
train_sds <- apply(train_cl[, 2:8], 2, sd)
# Scale features
train_mus <- apply(train_cl[, 3:8], 2, mean)
train_sds <- apply(train_cl[, 3:8], 2, sd)
train_scale <- (train_cl[, 3:8] - train_mus) / train_sds
test_scale <- (test_cl[, 3:8] - train_mus) / train_sds
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(Media_Attention ~ ., data = train_scale)
train_scale <- (train_cl[, 3:8] - train_mus) / train_sds
test_scale <- (test_cl[, 3:8] - train_mus) / train_sds
View(test_scale)
# Scale features
train_mus <- apply(train_cl[, 3:8], 2, mean)
train_sds <- apply(train_cl[, 3:8], 2, sd)
train_mus
train_scale <- (train_cl[, 3:8] - train_mus) / train_sds
test_scale <- (test_cl[, 3:8] - train_mus) / train_sds
# Add target column back to scaled datasets
train_scale$Media_Attention <- train_cl$Media_Attention
test_scale$Media_Attention <- test_cl$Media_Attention
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(Media_Attention ~ ., data = train_scale)
classifier_cl
# Predicting on test data
y_pred <- predict(classifier_cl, newdata = test_scale)
# Confusion Matrix
cm <- table(test_cl$Media_Attention, y_pred)
cm
# Model Evaluation
confusionMatrix(cm)
table(cm)
y_pred
test_cl$Media_Attention
# Confusion Matrix
coverage_levels <- c("Local", "Regional", "National", "International")
cm <- table(test_cl$Media_Attention, y_pred)
# Confusion Matrix
coverage_levels <- c("Local", "Regional", "National", "International")
cm <- table(
factor(test_cl$Media_Attention, levels = coverage_levels),
factor(y_pred, levels = coverage_levels)
)
cm
# Model Evaluation
confusionMatrix(cm)
table(nb_set$Media_Attention)
# Create copy of dataframe
nb_set_randomized <- nb_set
sample(c(1,2,3,4,5))
# Randomize Media_Attention column
nb_set_randomized$Media_Attention <- sample(nb_set$Media_Attention)
# Randomize Media_Attention column
nb_set_randomized$Media_Attention <- sample(nb_set$Media_Attention)
# Randomize Media_Attention column
nb_set_randomized$Media_Attention <- sample(nb_set$Media_Attention)
View(train_scale)
# Randomize Media_Attention column
train_scale_r <- train_scale
# Randomize Media_Attention column
train_scale_r <- train_scale
train_scale_r$Media_Attention <- sample(train_scale$Media_Attention)
# Fitting Naive Bayes Model to training dataset
classifier_cl_r <- naiveBayes(Media_Attention ~ ., data = train_scale_r)
classifier_cl_r
# Predicting on test data
y_pred_r <- predict(classifier_cl_r, newdata = test_scale)
# Confusion Matrix
cm_r <- table(
factor(test_cl$Media_Attention, levels = coverage_levels),
factor(y_pred_r, levels = coverage_levels)
)
cm_r
# Model Evaluation
confusionMatrix(cm_r)
# Model Evaluation
confusionMatrix(cm_r)
test_df <- read.csv("../../../data/02-clean-data/SSDB/incident_ncessch.csv") %>%
filter(!is.na(ncessch))
test_df <- read.csv("../../../data/02-clean-data/SSDB/incident_ncessch.csv")
test_df <- read.csv("../../../data/02-clean-data/SSDB/incident.csv")
test_df <- read.csv("../../../data/02-clean-data/SSDB/incident_ncessch.csv") %>%
filter(!is.na(ncessch))
is.na(test_df$Media_Attention)
sum(is.na(test_df$Media_Attention))
sum(test_df[test_df$Media_Attention == ""]$Media_Attention)
sum(test_df[test_df$Media_Attention == "",]$Media_Attention)
test_df[test_df$Media_Attention == "",]$Media_Attention
length(test_df[test_df$Media_Attention == "",]$Media_Attention)
596/781
781-596
heatmap(cm)
heatmap(cm, Rowv = NA, Colv = NA)
library(corrplot)
corrplot(cm)
cm
fourfoldplot(cm)
library(yardstick)
install.packages('yardstick')
library(yardstick)
library(ggplot2)
library(yardstick)
library(ggplot2)
# The confusion matrix from a single assessment set (i.e. fold)
autoplot(cm, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1")
autoplot(cm, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1")
library(yardstick)
library(ggplot2)
autoplot(cm, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1")
install.packages("yardstick")
install.packages("yardstick")
library(yardstick)
library(ggplot2)
autoplot(cm, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1")
y_results <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred, levels = coverage_levels)
)
y_rand <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred_r, levels = coverage_levels)
)
cm_viz <-
autoplot(cm, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1")
cm_viz <- conf_mat(y_results, obs, pred)
cm_viz_r <- conf_mat(y_rand, obs, pred)
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1")
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1") +
theme(legend.position = "right")
library(yardstick)
library(ggplot2)
y_results <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred, levels = coverage_levels)
)
y_rand <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred_r, levels = coverage_levels)
)
cm_viz <- conf_mat(y_results, obs, pred)
cm_viz_r <- conf_mat(y_rand, obs, pred)
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1") +
theme(
text = element_text(size=20),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model")
library(yardstick)
library(ggplot2)
y_results <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred, levels = coverage_levels)
)
y_rand <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred_r, levels = coverage_levels)
)
cm_viz <- conf_mat(y_results, obs, pred)
cm_viz_r <- conf_mat(y_rand, obs, pred)
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1") +
theme(
text = element_text(size=20),
axis.text = element_text(size = 18)
legend.position = "right"
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1") +
theme(
text = element_text(size=20),
axis.text = element_text(size = 18),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model")
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#2E86C1") +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model")
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#D6EAF8",high = "#228b22") +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model")
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22") +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model")
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22") +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model") +
scale_fill_gradientn(limits=c(0, 30))
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30))) +
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30)) +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model")
library(yardstick)
library(ggplot2)
y_results <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred, levels = coverage_levels)
)
y_rand <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred_r, levels = coverage_levels)
)
cm_viz <- conf_mat(y_results, obs, pred)
cm_viz_r <- conf_mat(y_rand, obs, pred)
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30)) +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model")
ggsave("../../../501-project-website/images/naive-bayes/confusion_matrix_trained2.png")
getwd()
library(yardstick)
library(ggplot2)
y_results <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred, levels = coverage_levels)
)
y_rand <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred_r, levels = coverage_levels)
)
cm_viz <- conf_mat(y_results, obs, pred)
cm_viz_r <- conf_mat(y_rand, obs, pred)
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30)) +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model")
ggsave("../../../501-project-website/images/naive_bayes/confusion_matrix_trained2.png")
library(yardstick)
library(ggplot2)
y_results <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred, levels = coverage_levels)
)
y_rand <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred_r, levels = coverage_levels)
)
cm_viz <- conf_mat(y_results, obs, pred)
cm_viz_r <- conf_mat(y_rand, obs, pred)
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30)) +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Trained Naive Bayes Model")
ggsave("../../../501-project-website/images/naive_bayes/confusion_matrix_trained2.png")
autoplot(cm_viz_r, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30)) +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model")
ggsave("../../../501-project-website/images/naive_bayes/confusion_matrix_baseline2.png")
cm
cm_viz
transpose(cm_viz)
library(yardstick)
library(ggplot2)
y_results <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred, levels = coverage_levels)
)
y_rand <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred_r, levels = coverage_levels)
)
cm_viz <- conf_mat(y_results, pred, obs)
cm_viz_r <- conf_mat(y_rand, pred, obs)
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30)) +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Trained Naive Bayes Model")
ggsave("../../../501-project-website/images/naive_bayes/confusion_matrix_trained2.png")
library(yardstick)
library(ggplot2)
y_results <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred, levels = coverage_levels)
)
y_rand <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred_r, levels = coverage_levels)
)
cm_viz <- conf_mat(y_results, obs, pred)
cm_viz_r <- conf_mat(y_rand, obs, pred)
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30)) +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Trained Naive Bayes Model")
ggsave("../../../501-project-website/images/naive_bayes/confusion_matrix_trained2.png")
precision(test_cl$Media_Attention, y_pred)
install.packages("Metrics")
library(Metrics)
precision(test_cl$Media_Attention, y_pred)
library(Metrics)
precision(
factor(test_cl$Media_Attention, levels = coverage_levels),
factor(y_pred_r, levels = coverage_levels)
)
library(Metrics)
precision(
as.numeric(test_cl$Media_Attention),
as.numeric(y_pred_r)
)
y_pred
