School_Level != "K-8" &
School_Level != "Other")) %>%
# Join fatalities data
left_join(fatalities, by = "Incident_ID") %>%
# Change missing values in fatalities column to 0
mutate(fatalities = ifelse(is.na(fatalities), 0, fatalities),
# Reorder levels for Media_Attention
Media_Attention =
fct_relevel(Media_Attention,
"Local",
"Regional",
"National",
"International"),
# Consolidate Jr High and Middle in School_Level
School_Level = replace(School_Level,
School_Level == "Junior High",
"Middle"),
# Reorder levels and convert to numeric
School_Level = as.numeric(
fct_relevel(School_Level,
"Elementary",
"Middle",
"High"))
)
View(nb_set)
nb_set <- incidents %>%
# Select columns of interest
select(Incident_ID,
Media_Attention,
School_Level,
pct_White,
pct_Black,
pct_Hispanic,
pct_Asian) %>%
# Filter out missing data
filter(Media_Attention != "",
School_Level != "null",
!is.na(pct_White),
!is.na(pct_Black),
!is.na(pct_Hispanic),
!is.na(pct_Asian),
# Also filter out non-high school, middle school, and elem school
# classifications for simplicity (only four don't belong to these
# categories)
(School_Level != "K-12" &
School_Level != "K-8" &
School_Level != "Other")) %>%
# Join fatalities data
left_join(fatalities, by = "Incident_ID") %>%
# Change missing values in fatalities column to 0
mutate(fatalities = ifelse(is.na(fatalities), 0, fatalities),
# Reorder levels for Media_Attention
Media_Attention =
fct_relevel(Media_Attention,
"Local",
"Regional",
"National",
"International"),
# Consolidate Jr High and Middle in School_Level
School_Level = replace(School_Level,
School_Level == "Junior High",
"Middle"),
# Reorder levels and convert to numeric
School_Level = as.numeric(
fct_relevel(School_Level,
"Elementary",
"Middle",
"High"))
)
# Save nb_set for future classification tasks
write_csv(
nb_set,
"./../../../data/02-clean-data/SSDB/news_classification.csv",
row.names = FALSE
)
nb_set <- incidents %>%
# Select columns of interest
select(Incident_ID,
Media_Attention,
School_Level,
pct_White,
pct_Black,
pct_Hispanic,
pct_Asian) %>%
# Filter out missing data
filter(Media_Attention != "",
School_Level != "null",
!is.na(pct_White),
!is.na(pct_Black),
!is.na(pct_Hispanic),
!is.na(pct_Asian),
# Also filter out non-high school, middle school, and elem school
# classifications for simplicity (only four don't belong to these
# categories)
(School_Level != "K-12" &
School_Level != "K-8" &
School_Level != "Other")) %>%
# Join fatalities data
left_join(fatalities, by = "Incident_ID") %>%
# Change missing values in fatalities column to 0
mutate(fatalities = ifelse(is.na(fatalities), 0, fatalities),
# Reorder levels for Media_Attention
Media_Attention =
fct_relevel(Media_Attention,
"Local",
"Regional",
"National",
"International"),
# Consolidate Jr High and Middle in School_Level
School_Level = replace(School_Level,
School_Level == "Junior High",
"Middle"),
# Reorder levels and convert to numeric
School_Level = as.numeric(
fct_relevel(School_Level,
"Elementary",
"Middle",
"High"))
)
# Save nb_set for future classification tasks
write.csv(
nb_set,
"./../../../data/02-clean-data/SSDB/news_classification.csv",
row.names = FALSE
)
nb_set <- incidents %>%
# Select columns of interest
select(Incident_ID,
Media_Attention,
School_Level,
pct_White,
pct_Black,
pct_Hispanic,
pct_Asian) %>%
# Filter out missing data
filter(Media_Attention != "",
School_Level != "null",
!is.na(pct_White),
!is.na(pct_Black),
!is.na(pct_Hispanic),
!is.na(pct_Asian),
# Also filter out non-high school, middle school, and elem school
# classifications for simplicity (only four don't belong to these
# categories)
(School_Level != "K-12" &
School_Level != "K-8" &
School_Level != "Other")) %>%
# Join fatalities data
left_join(fatalities, by = "Incident_ID") %>%
# Change missing values in fatalities column to 0
mutate(fatalities = ifelse(is.na(fatalities), 0, fatalities),
# Reorder levels for Media_Attention
Media_Attention =
fct_relevel(Media_Attention,
"Local",
"Regional",
"National",
"International"),
# Consolidate Jr High and Middle in School_Level
School_Level = replace(School_Level,
School_Level == "Junior High",
"Middle"),
# Reorder levels and convert to numeric
School_Level = as.numeric(
fct_relevel(School_Level,
"Elementary",
"Middle",
"High"))
)
# Save nb_set for future classification tasks
write.csv(
nb_set,
"./../../../data/02-clean-data/SSDB/News_Classification/news_classification.csv",
row.names = FALSE
)
# Perform train-test split
split <- sample.split(nb_set, SplitRatio = 0.7)
train_cl <- subset(nb_set, split == "TRUE")
test_cl <- subset(nb_set, split == "FALSE")
# Scale features
train_mus <- apply(train_cl[, 3:8], 2, mean)
train_sds <- apply(train_cl[, 3:8], 2, sd)
train_scale <- (train_cl[, 3:8] - train_mus) / train_sds
test_scale <- (test_cl[, 3:8] - train_mus) / train_sds
# Add target column back to scaled datasets
train_scale$Media_Attention <- train_cl$Media_Attention
test_scale$Media_Attention <- test_cl$Media_Attention
# Save train_scale and test_scale for future classification problems
write.csv(
train_scale,
"./../../../data/02-clean-data/SSDB/News_Classification/train_scale.csv",
row.names = FALSE
)
write.csv(
test_scale,
"./../../../data/02-clean-data/SSDB/News_Classification/test_scale.csv",
row.names = FALSE
)
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(Media_Attention ~ ., data = train_scale)
classifier_cl
# Predicting on test data
y_pred <- predict(classifier_cl, newdata = test_scale)
# Confusion Matrix
coverage_levels <- c("Local", "Regional", "National", "International")
cm <- table(
factor(test_cl$Media_Attention, levels = coverage_levels),
factor(y_pred, levels = coverage_levels)
)
cm
# Model Evaluation
confusionMatrix(cm)
classifier_cl
# Model Evaluation
confusionMatrix(cm)
table(nb_set$Media_Attention)
# Randomize Media_Attention column
train_scale_r <- train_scale
train_scale_r$Media_Attention <- sample(train_scale$Media_Attention)
# Fitting Naive Bayes Model to training dataset
classifier_cl_r <- naiveBayes(Media_Attention ~ ., data = train_scale_r)
classifier_cl_r
# Predicting on test data
y_pred_r <- predict(classifier_cl_r, newdata = test_scale)
# Confusion Matrix
cm_r <- table(
factor(test_cl$Media_Attention, levels = coverage_levels),
factor(y_pred_r, levels = coverage_levels)
)
cm_r
# Model Evaluation
confusionMatrix(cm_r)
classifier_cl_r
# Model Evaluation
confusionMatrix(cm_r)
# Perform train-test split
split <- sample.split(nb_set, SplitRatio = 0.7)
train_cl <- subset(nb_set, split == "TRUE")
test_cl <- subset(nb_set, split == "FALSE")
# Scale features
train_mus <- apply(train_cl[, 3:8], 2, mean)
train_sds <- apply(train_cl[, 3:8], 2, sd)
train_scale <- (train_cl[, 3:8] - train_mus) / train_sds
test_scale <- (test_cl[, 3:8] - train_mus) / train_sds
# Add target column back to scaled datasets
train_scale$Media_Attention <- train_cl$Media_Attention
test_scale$Media_Attention <- test_cl$Media_Attention
# Save train_scale and test_scale for future classification problems
write.csv(
train_scale,
"./../../../data/02-clean-data/SSDB/News_Classification/train_scale.csv",
row.names = FALSE
)
write.csv(
test_scale,
"./../../../data/02-clean-data/SSDB/News_Classification/test_scale.csv",
row.names = FALSE
)
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(Media_Attention ~ ., data = train_scale)
classifier_cl
# Predicting on test data
y_pred <- predict(classifier_cl, newdata = test_scale)
# Confusion Matrix
coverage_levels <- c("Local", "Regional", "National", "International")
cm <- table(
factor(test_cl$Media_Attention, levels = coverage_levels),
factor(y_pred, levels = coverage_levels)
)
cm
# Model Evaluation
confusionMatrix(cm)
# Model Evaluation
confusionMatrix(cm)
# Randomize Media_Attention column
train_scale_r <- train_scale
train_scale_r$Media_Attention <- sample(train_scale$Media_Attention)
# Fitting Naive Bayes Model to training dataset
classifier_cl_r <- naiveBayes(Media_Attention ~ ., data = train_scale_r)
classifier_cl_r
# Predicting on test data
y_pred_r <- predict(classifier_cl_r, newdata = test_scale)
# Confusion Matrix
cm_r <- table(
factor(test_cl$Media_Attention, levels = coverage_levels),
factor(y_pred_r, levels = coverage_levels)
)
cm_r
# Model Evaluation
confusionMatrix(cm_r)
# Model Evaluation
confusionMatrix(cm_r)
library(yardstick)
library(ggplot2)
y_results <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred, levels = coverage_levels)
)
y_rand <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred_r, levels = coverage_levels)
)
cm_viz <- conf_mat(y_results, obs, pred)
cm_viz_r <- conf_mat(y_rand, obs, pred)
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30)) +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Trained Naive Bayes Model")
ggsave("../../../501-project-website/images/naive_bayes/confusion_matrix_trained2.png")
autoplot(cm_viz_r, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30)) +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model")
ggsave("../../../501-project-website/images/naive_bayes/confusion_matrix_baseline2.png")
# Perform train-test split
split <- sample.split(nb_set, SplitRatio = 0.7)
train_cl <- subset(nb_set, split == "TRUE")
test_cl <- subset(nb_set, split == "FALSE")
# Save train_cl and test_cl for future classification problems
write.csv(
train_cl,
"./../../../data/02-clean-data/SSDB/News_Classification/train_set.csv",
row.names = FALSE
)
write.csv(
test_cl,
"./../../../data/02-clean-data/SSDB/News_Classification/test_set.csv",
row.names = FALSE
)
# Scale features
train_mus <- apply(train_cl[, 3:8], 2, mean)
train_sds <- apply(train_cl[, 3:8], 2, sd)
train_scale <- (train_cl[, 3:8] - train_mus) / train_sds
test_scale <- (test_cl[, 3:8] - train_mus) / train_sds
# Add target column back to scaled datasets
train_scale$Media_Attention <- train_cl$Media_Attention
test_scale$Media_Attention <- test_cl$Media_Attention
# Save train_scale and test_scale for future classification problems
write.csv(
train_scale,
"./../../../data/02-clean-data/SSDB/News_Classification/train_scale.csv",
row.names = FALSE
)
write.csv(
test_scale,
"./../../../data/02-clean-data/SSDB/News_Classification/test_scale.csv",
row.names = FALSE
)
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(Media_Attention ~ ., data = train_scale)
classifier_cl
# Predicting on test data
y_pred <- predict(classifier_cl, newdata = test_scale)
# Confusion Matrix
coverage_levels <- c("Local", "Regional", "National", "International")
cm <- table(
factor(test_cl$Media_Attention, levels = coverage_levels),
factor(y_pred, levels = coverage_levels)
)
cm
# Model Evaluation
confusionMatrix(cm)
# Perform train-test split
split <- sample.split(nb_set, SplitRatio = 0.7)
train_cl <- subset(nb_set, split == "TRUE")
test_cl <- subset(nb_set, split == "FALSE")
# Save train_cl and test_cl for future classification problems
write.csv(
train_cl,
"./../../../data/02-clean-data/SSDB/News_Classification/train_set.csv",
row.names = FALSE
)
write.csv(
test_cl,
"./../../../data/02-clean-data/SSDB/News_Classification/test_set.csv",
row.names = FALSE
)
# Scale features
train_mus <- apply(train_cl[, 3:8], 2, mean)
train_sds <- apply(train_cl[, 3:8], 2, sd)
train_scale <- (train_cl[, 3:8] - train_mus) / train_sds
test_scale <- (test_cl[, 3:8] - train_mus) / train_sds
# Add target column back to scaled datasets
train_scale$Media_Attention <- train_cl$Media_Attention
test_scale$Media_Attention <- test_cl$Media_Attention
# Save train_scale and test_scale for future classification problems
write.csv(
train_scale,
"./../../../data/02-clean-data/SSDB/News_Classification/train_scale.csv",
row.names = FALSE
)
write.csv(
test_scale,
"./../../../data/02-clean-data/SSDB/News_Classification/test_scale.csv",
row.names = FALSE
)
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(Media_Attention ~ ., data = train_scale)
classifier_cl
# Predicting on test data
y_pred <- predict(classifier_cl, newdata = test_scale)
# Confusion Matrix
coverage_levels <- c("Local", "Regional", "National", "International")
cm <- table(
factor(test_cl$Media_Attention, levels = coverage_levels),
factor(y_pred, levels = coverage_levels)
)
cm
# Model Evaluation
confusionMatrix(cm)
# Perform train-test split
split <- sample.split(nb_set, SplitRatio = 0.7)
train_cl <- subset(nb_set, split == "TRUE")
test_cl <- subset(nb_set, split == "FALSE")
# Save train_cl and test_cl for future classification problems
write.csv(
train_cl,
"./../../../data/02-clean-data/SSDB/News_Classification/train_set.csv",
row.names = FALSE
)
write.csv(
test_cl,
"./../../../data/02-clean-data/SSDB/News_Classification/test_set.csv",
row.names = FALSE
)
# Scale features
train_mus <- apply(train_cl[, 3:8], 2, mean)
train_sds <- apply(train_cl[, 3:8], 2, sd)
train_scale <- (train_cl[, 3:8] - train_mus) / train_sds
test_scale <- (test_cl[, 3:8] - train_mus) / train_sds
# Add target column back to scaled datasets
train_scale$Media_Attention <- train_cl$Media_Attention
test_scale$Media_Attention <- test_cl$Media_Attention
# Save train_scale and test_scale for future classification problems
write.csv(
train_scale,
"./../../../data/02-clean-data/SSDB/News_Classification/train_scale.csv",
row.names = FALSE
)
write.csv(
test_scale,
"./../../../data/02-clean-data/SSDB/News_Classification/test_scale.csv",
row.names = FALSE
)
# Fitting Naive Bayes Model to training dataset
classifier_cl <- naiveBayes(Media_Attention ~ ., data = train_scale)
classifier_cl
# Predicting on test data
y_pred <- predict(classifier_cl, newdata = test_scale)
# Confusion Matrix
coverage_levels <- c("Local", "Regional", "National", "International")
cm <- table(
factor(test_cl$Media_Attention, levels = coverage_levels),
factor(y_pred, levels = coverage_levels)
)
cm
# Model Evaluation
confusionMatrix(cm)
# Randomize Media_Attention column
train_scale_r <- train_scale
train_scale_r$Media_Attention <- sample(train_scale$Media_Attention)
# Fitting Naive Bayes Model to training dataset
classifier_cl_r <- naiveBayes(Media_Attention ~ ., data = train_scale_r)
classifier_cl_r
# Predicting on test data
y_pred_r <- predict(classifier_cl_r, newdata = test_scale)
# Confusion Matrix
cm_r <- table(
factor(test_cl$Media_Attention, levels = coverage_levels),
factor(y_pred_r, levels = coverage_levels)
)
cm_r
# Model Evaluation
confusionMatrix(cm_r)
library(yardstick)
library(ggplot2)
y_results <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred, levels = coverage_levels)
)
y_rand <- data.frame(
obs = factor(test_cl$Media_Attention, levels = coverage_levels),
pred = factor(y_pred_r, levels = coverage_levels)
)
cm_viz <- conf_mat(y_results, obs, pred)
cm_viz_r <- conf_mat(y_rand, obs, pred)
autoplot(cm_viz, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30)) +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Trained Naive Bayes Model")
ggsave("../../../501-project-website/images/naive_bayes/confusion_matrix_trained2.png")
autoplot(cm_viz_r, type = "heatmap") +
scale_fill_gradient(low="#E1F1DA",high = "#228b22", limits=c(0, 30)) +
theme(
text = element_text(size=20),
axis.text = element_text(size = 16),
legend.position = "right"
) +
ggtitle("Baseline Naive Bayes Model")
ggsave("../../../501-project-website/images/naive_bayes/confusion_matrix_baseline2.png")
